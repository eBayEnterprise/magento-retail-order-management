<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://api.gsicommerce.com/schema/checkout/1.0" targetNamespace="http://api.gsicommerce.com/schema/checkout/1.0"
    elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <xsd:include schemaLocation="Inventory-Datatypes-1.0.xsd" />

  <xsd:complexType name="QuantityRequestMessage">
    <xsd:annotation>
      <xsd:documentation>
      <p>
      Quantity API is used to check available to promise inventory for one or
      more items. Default is fulfillment center ATP inventory for the item, 
      but an item request can be qualified by store ID to get in-store ATP 
      inventory for the item at a specific store location.
      </p>
      <p>
      Prescribed API usage:
      <ul>
      <li>add to cart</li>
      <li>update quantity in cart</li>
      <li>move from wish list to cart</li>
      <li>restoring cart from persistent storage</li>
      </ul>
      </p>
      <p>
      A quantity request message consists of a list of one or more quantity 
      request lines each of which in turn consists of an item identifier,
      a line identifier used to correlate request lines with response lines and
      and optional store identifier for in store pickup lines.
      </p>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="QuantityRequest" type="QuantityRequest" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="QuantityRequestMessage" type="QuantityRequestMessage"
               nillable="false" />

  <xsd:complexType name="QuantityRequest">
    <xsd:attribute name="lineId" type="xsd:string" use="required" />
    <xsd:attribute name="itemId" type="ItemId" use="required" />
  </xsd:complexType>

  <xsd:element name="QuantityResponseMessage">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">
      This type defines the syntax of a response message for the EB2C inventory
      quantity operation.  A quantity response message consists of a list of one 
      or more quantity response lines each in turn consisting of an item 
      identifier, a line identifier used to correlate response lines with request
      lines and a quantity value.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="QuantityResponse" type="QuantityResponse"
                     maxOccurs="unbounded" />
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <xsd:complexType name="QuantityResponse">
    <xsd:sequence>
        <xsd:element name="Quantity" type="xsd:int"/>
        <xsd:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="skip" >
            <xsd:annotation>
                <xsd:documentation xml:lang="en">
                    This xsd:any element indicates that future optional elements may show up in this location of the XML document in the
                    responses returned from the service.
                    The purpose of this xsd:any element is to define a more robust service interface that allows for new, optional elements to be added
                    to the service's responses without the service clients' code throwing exceptions.
                    The client code for this service call should be written to not break if new optional XML elements show up in this part
                    of the service response.  Modern XML marshalling frameworks often process xsd:any elements properly out-of-the-box
                    (for example, in Java, JAXB and JibX XML marshalling frameworks both honor xsd:any elements and don't throw exceptions
                    if new optional elements appear within the xsd:any section of the XML document).
                    Developers' unit tests of their service client code should include a test case where this reply message
                    contains one or more new elements in this location of the XML document.
                    If new optional elements are added to this interface, a new schema will be created, communications will be sent out,
                    and you will have the option to modify your service client code to process and use the new elements.
                    If there is no need/desire to process the new optional elements, your service client should continue to run
                    uninterrupted as long as it is built to honor this xsd:any element.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:any>
    </xsd:sequence>
    <xsd:attribute name="lineId" type="xsd:string" use="required"/>
    <xsd:attribute name="itemId" type="ItemId" use="required"/>
  </xsd:complexType>

</xsd:schema>