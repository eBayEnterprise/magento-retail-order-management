<?xml version="1.0" encoding="UTF-8"?>

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified" attributeFormDefault="unqualified"
            targetNamespace="http://api.gsicommerce.com/schema/checkout/1.0"
            xmlns="http://api.gsicommerce.com/schema/checkout/1.0"
            version="1.0">

    <xsd:element name="Fault" type="FaultResponseType">
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
            Fault will be returned when an exception occurs that prevents a the transaction from being processed.
            Examples:
            Invalid user input that violates the service interface.
            Sytem errors.
            Access to tenders/features not configured for an API client.
            A service that the system relies on is not available.
            Validation failure.
            A timeout occurred.
        </xsd:documentation>
      </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="FaultResponseType">
        <xsd:sequence>
            <xsd:element name="CreateTimestamp" type="xsd:dateTime"/>
            <xsd:element name="Code" type="xsd:string"/>
            <xsd:element name="Description" type="xsd:string"/>
            <xsd:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="skip" >
                <xsd:annotation>
                    <xsd:documentation xml:lang="en">
                        This xsd:any element indicates that future optional elements may show up in this location of the XML document in the
                        responses returned from the service.
                        The purpose of this xsd:any element is to define a more robust service interface that allows for new, optional elements to be added
                        to the service's responses without the service clients' code throwing exceptions.
                        The client code for this service call should be written to not break if new optional XML elements show up in this part
                        of the service response.  Modern XML marshalling frameworks often process xsd:any elements properly out-of-the-box
                        (for example, in Java, JAXB and JibX XML marshalling frameworks both honor xsd:any elements and don't throw exceptions
                        if new optional elements appear within the xsd:any section of the XML document).
                        Developers' unit tests of their service client code should include a test case where this reply message
                        contains one or more new elements in this location of the XML document.
                        If new optional elements are added to this interface, a new schema will be created, communications will be sent out,
                        and you will have the option to modify your service client code to process and use the new elements.
                        If there is no need/desire to process the new optional elements, your service client should continue to run
                        uninterrupted as long as it is built to honor this xsd:any element.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:any>
        </xsd:sequence>
    </xsd:complexType>
</xsd:schema>
